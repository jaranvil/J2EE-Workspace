package edu.novascotia.training;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import edu.novascotia.training.model.Assignment;
import edu.novascotia.training.model.Course;
import edu.novascotia.training.model.RegularAssignment;
import edu.novascotia.training.model.RegularCourse;
import edu.novascotia.training.model.RegularStudent;
import edu.novascotia.training.model.Student;
import edu.novascotia.training.utitlty.Configuration;
import edu.novascotia.training.utitlty.FileHandler;

/**
 * Servlet implementation class ListStudent
 */
public class ListStudent extends HttpServlet {
	 /** list of students course assignments mark read; each per line. */
	private static List<String>  list;
	/** list of students. */
    private static List<Student> students = new ArrayList<Student>();
	    
	    
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ListStudent() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//response.getWriter().append("Served at: ").append(request.getContextPath());
		
		loadCourseMarks(FileHandler.loadConfig(Configuration.CONFIGURATION_FILE));
		
		
		String students = getStudentString();
		String[] student = students.split(";");
		
		for (int i=0;i<student.length;i++) {
			response.getWriter().write(student[i] + "<br />");
		}
		
		
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

	 
	
    /** display help menu. */
    private void displayHelp()
    {
        System.out.println("Please, supply the program with the suitable argument:");
        System.out.println("Enter \"1\" to display students info.");
    }

    private List<Student> loadCourseMarks(final List<String> lines) throws IOException
    {
       for (String line : lines)
        {
            String[] data = line.split("=");
            if (data[0].toLowerCase().contains(Configuration.ASSIGNMENT_LITERAL))
            {
                loadStudents(FileHandler.loadConfig(data[1]));
            }

        }
        return students;
    }
    
    private List<Student> loadStudents(final List<String> lines)
    {
        for (String line : lines)
        {
            String[] data = line.split(":");
            Student student = new RegularStudent(data[0], data[1]);
            Course course = new RegularCourse(data[2]);
            
            List<Assignment> assignments = new ArrayList<Assignment>();
            for (int x = 3; x < data.length; x++) {
            	Assignment assignment = new RegularAssignment(data[2], Double.parseDouble(data[x]));
            	assignments.add(assignment);
            }            
            course.setAssignments(assignments);
            student.addCourse(course);
            students.add(student);
        }
        return students;
    }

    

    /** print list of students. */

    private void printStudentsList()
    {
        for (Student student : students)
        {
            System.out.println(student);

        }

    }

    private void printStudentsGrades()
    {
        for (Student student : students)
        {
            
            List<Course> courses = student.getCourses();
            
            for (int i = 0; i < courses.size(); i++) {
            	List<Assignment> assignments = courses.get(i).getAssignments();
            	double sum = 0;
            	for (int x = 0; x< assignments.size(); x++ ) {
            		sum = sum + assignments.get(x).getMark();
            		//System.out.println(assignments.get(x).getMark());
            	}
            	System.out.println(student.getName() + " " + sum);
            }

        }

    }
    
    public String getStudentString() {
    	String result = "";
    	for (Student student : students)
        {
            
            List<Course> courses = student.getCourses();
            
            for (int i = 0; i < courses.size(); i++) {
            	List<Assignment> assignments = courses.get(i).getAssignments();
            	double sum = 0;
            	for (int x = 0; x< assignments.size(); x++ ) {
            		sum = sum + assignments.get(x).getMark();
            		//System.out.println(assignments.get(x).getMark());
            	}
            	result += student.getName() + " " + sum + ";";
            }
        }
    	return result;
    }
    
	public static List<String> getList()
	{
		return list;
	}

	public static void setList(List<String> list)
	{
		MarkAssignmentsMain.list = list;
	}
}
